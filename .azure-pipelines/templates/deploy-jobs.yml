jobs:
  - job: pypi
    pool:
      vmImage: ubuntu-18.04
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: python-dist
          path: $(Build.SourcesDirectory)/dist
        displayName: Retrieve Python dist
      - task: UsePythonVersion@0
        inputs:
          versionSpec: 3.8
          addToPath: true
        displayName: Install Python
      - script: |
          python -m pip install -U pip
          pip install twine
        displayName: Prepare environment
      - script: |
          twine upload dist/* -u "$(twine.username)" -p "$(twine.password)"
        displayName: Upload Python dist to PyPI

  - job: docker
    pool:
      vmImage: ubuntu-18.04
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: 3.8
          addToPath: true
        displayName: Install Python
      - script: |
          python -m pip install -U pip
          pip install poetry
        displayName: Prepare environment
      - task: Docker@2
        inputs:
          command: login
          containerRegistry: docker-hub
        displayName: Login to DockerHub
      - script: |
          curl -fsSL get.docker.com -o get-docker.sh && sh get-docker.sh
          export DOCKER_CLI_EXPERIMENTAL=enabled
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --use
        displayName: Configure Docker buildx plugin with multiarch support
      - script: |
          version=`poetry version | awk '{print $2}'`
          echo "Docker tag is: $version"
          docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 --tag adferrand/dnsrobocert --tag adferrand/dnsrobocert:$version --push .
          # LEGACY DEPLOY
          docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 --tag adferrand/letsencrypt-dns --tag adferrand/letsencrypt-dns:$version --push .
        displayName: Build and deploy Docker images to DockerHub
      - script: |
          curl -X POST $(microbadger.dnsrobocert.trigger)
          # LEGACY DEPLOY
          curl -X POST $(microbadger.letsencrypt-dns.trigger)
        displayName: Trigger Microbadger inspection

  - job: github_release
    pool:
      vmImage: ubuntu-18.04
    dependsOn:
      - pypi
      - docker
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: changelog
          path: $(Build.SourcesDirectory)/changelog
        displayName: Retrieve release changelog
      - script: |
          version=`ls changelog/*.md | sed -E 's/.*release_(.*)\.md/\1/g'`
          echo "Version is: $version"
          echo "##vso[task.setvariable variable=ReleaseVersion;]$version"
      - task: GithubRelease@0
        inputs:
          gitHubConnection: github.com_adferrand
          title: DNSroboCert $(ReleaseVersion)
          releaseNotesFile: $(Build.SourcesDirectory)/changelog/release_$(ReleaseVersion).md
          addChangeLog: false
        displayName: Create GitHub Release
